
Процедура ИсполняемыеСценарии() Экспорт

	// И ПриходТовара, и РасходТовара делают движения по регистру Взаиморасчеты.
	// Можно было бы ограничиться ими, но это совсем неправильная бизнес-логика,
	// поэтому создадим еще платежки.
	
	ЮТТесты.ДобавитьТестовыйНабор(НСтр("ru = 'Регистр накопления Взаиморасчеты: Проверка полного списания остатков'")).ВТранзакции()
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковПриОплатеПозитив", НСтр("ru = 'Проверка полного списания остатков при оплате'"), НСтр("ru = 'Позитив, ДЗ20, Левкина Ольга'"))
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковПриОплатеНегатив", НСтр("ru = 'Проверка полного списания остатков при оплате: Оплачена не вся сумма'"), НСтр("ru = 'Негатив, ДЗ20, Левкина Ольга'"))
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковПриПоступленииДенегПозитив", НСтр("ru = 'Проверка полного списания остатков при поступлении денег'"), НСтр("ru = 'Позитив, ДЗ20, Левкина Ольга'"))
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковПриПоступленииДенегНегатив", НСтр("ru = 'Проверка полного списания остатков при поступлении денег: Указана неверная валюта'"), НСтр("ru = 'Негатив, ДЗ20, Левкина Ольга'"))
		;

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковПриОплатеПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание элементов справочников
	Товар = СоздатьТовар("Test_Яблоко");
	Поставщик = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты);
	Валюта = ЮТест.Данные().СоздатьЭлемент(Справочники.Валюты);
	
	ЦенаЗакупки = 100;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	// 2. Выполнение функции.
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
		
		ПриходТовара = СоздатьДокументПриходТовара(Товар, Поставщик, Валюта, ЦенаЗакупки, ТекущееКоличество);
		
		СуммаОплаты = ЦенаЗакупки * ТекущееКоличество;
		Оплата = СоздатьДокументОплата(Поставщик, Валюта, ПриходТовара.Организация, СуммаОплаты);
		
	КонецЦикла;
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Контрагент = &Поставщик");
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Поставщик", Поставщик);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", Валюта);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатПустой(ОписаниеЗапроса)).ЭтоИстина();

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковПриОплатеНегатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание элементов справочников
	Товар = СоздатьТовар("Test_Яблоко");
	Поставщик = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты);
	Валюта = ЮТест.Данные().СоздатьЭлемент(Справочники.Валюты);
	
	ЦенаЗакупки = 100;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	СуммаКОплате = 0;
	
	// 2. Выполнение функции.
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
		
		ПриходТовара = СоздатьДокументПриходТовара(Товар, Поставщик, Валюта, ЦенаЗакупки, ТекущееКоличество);
		СуммаКОплате = СуммаКОплате + ЦенаЗакупки * ТекущееКоличество;
		
		СуммаОплаты = 0.5 * ЦенаЗакупки * ТекущееКоличество;
		Оплата = СоздатьДокументОплата(Поставщик, Валюта, ПриходТовара.Организация, СуммаОплаты);
		СуммаКОплате = СуммаКОплате - СуммаОплаты;
		
	КонецЦикла;
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Контрагент = &Поставщик");
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Поставщик", Поставщик);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", Валюта);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса)[0].СуммаОстаток)
		.Равно(СуммаКОплате)
		;

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковПриПоступленииДенегПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание элементов справочников
	Товар = СоздатьТовар("Test_Яблоко");
	Поставщик = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты);
	Покупатель = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты);
	Валюта = ЮТест.Данные().СоздатьЭлемент(Справочники.Валюты);
	
	ЦенаЗакупки = 100;
	ЦенаПродажи = 120;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	// 2. Выполнение функции.
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
		
		ПриходТовара = СоздатьДокументПриходТовара(Товар, Поставщик, Валюта, ЦенаЗакупки, ТекущееКоличество);
		
		РасходТовара = СоздатьДокументРасходТовара(Товар, ПриходТовара.Склад, Покупатель, Валюта, ПриходТовара.Организация, ЦенаПродажи, ТекущееКоличество);
		
		СуммаОплаты = ЦенаПродажи * ТекущееКоличество;
		ПоступлениеДенег = СоздатьДокументПоступлениеДенег(Покупатель, Валюта, ПриходТовара.Организация, СуммаОплаты);
		
	КонецЦикла;
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Контрагент = &Покупатель");
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Покупатель", Покупатель);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", Валюта);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатПустой(ОписаниеЗапроса)).ЭтоИстина();

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковПриПоступленииДенегНегатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание элементов справочников
	Товар = СоздатьТовар("Test_Яблоко");
	Поставщик = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты);
	Покупатель = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты);
	Валюта = ЮТест.Данные().СоздатьЭлемент(Справочники.Валюты);
	ВалютаОплаты = ЮТест.Данные().СоздатьЭлемент(Справочники.Валюты);
	
	ЦенаЗакупки = 100;
	ЦенаПродажи = 120;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	СуммаКОплате = 0;
	
	// 2. Выполнение функции.
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
		
		ПриходТовара = СоздатьДокументПриходТовара(Товар, Поставщик, Валюта, ЦенаЗакупки, ТекущееКоличество);
		
		РасходТовара = СоздатьДокументРасходТовара(Товар, ПриходТовара.Склад, Покупатель, Валюта, ПриходТовара.Организация, ЦенаПродажи, ТекущееКоличество);
		СуммаКОплате = СуммаКОплате + ЦенаПродажи * ТекущееКоличество;
		
		СуммаОплаты = ЦенаПродажи * ТекущееКоличество;
		ПоступлениеДенег = СоздатьДокументПоступлениеДенег(Покупатель, ВалютаОплаты, ПриходТовара.Организация, СуммаОплаты);
		
	КонецЦикла;
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Контрагент = &Покупатель");
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Покупатель", Покупатель);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", Валюта);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса)[0].СуммаОстаток)
		.Равно(-СуммаКОплате)
		;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция СоздатьТовар(Наименование)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
		.ФикцияОбязательныхПолей()
		.Установить("Вид", Перечисления.ВидыТоваров.Товар)
		.Установить("Наименование", Наименование)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьРасчетныйСчетКонтрагента(Контрагент)
	
	КонструкторРасчетногоСчета = ЮТест.Данные().КонструкторОбъекта("Справочники.РасчетныеСчетаКонтрагентов")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Test_001")
		.Установить("Владелец", Контрагент)
		;
		
	РасчетныйСчетНовый = КонструкторРасчетногоСчета.Записать();
	
	Возврат РасчетныйСчетНовый;

КонецФункции

Функция СоздатьРасчетныйСчет(Организация)
	
	КонструкторРасчетногоСчета = ЮТест.Данные().КонструкторОбъекта("Справочники.РасчетныеСчета")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Test_001")
		.Установить("Владелец", Организация)
		;
		
	РасчетныйСчетНовый = КонструкторРасчетногоСчета.Записать();
	
	Возврат РасчетныйСчетНовый;

КонецФункции

Функция СоздатьДокументПриходТовара(Товар, Поставщик, Валюта, Цена, Количество)

	КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Склад")
		.Установить("Поставщик", Поставщик)
		.Установить("Валюта", Валюта)
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", Товар)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Цена * Количество)
		;
		
	ПриходТовара = КонструкторПрихода.Провести();
	
	Возврат ПриходТовара;

КонецФункции

Функция СоздатьДокументОплата(Поставщик, Валюта, Организация, Сумма)

	КонструкторОплаты = ЮТест.Данные().КонструкторОбъекта("Документы.Оплата")
		.Установить("РасчетныйСчетПоставщика", СоздатьРасчетныйСчетКонтрагента(Поставщик))
		.Установить("РасчетныйСчет", СоздатьРасчетныйСчет(Организация))
		.Установить("Поставщик", Поставщик)
		.Установить("Валюта", Валюта)
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.Установить("Сумма", Сумма)
		;
		
	Оплата = КонструкторОплаты.Провести();
	
	Возврат Оплата;

КонецФункции

Функция СоздатьДокументРасходТовара(Товар, Склад, Покупатель, Валюта, Организация, Цена, Количество)

	КонструкторРасхода = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Склад", Склад)
		.Установить("Валюта", Валюта)
		.Установить("Организация", Организация)
		.Установить("Покупатель", Покупатель)
		.ФикцияРеквизитов("ВидЦен, ОбоснованиеОтгрузки")
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", Товар)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Цена * Количество)
		;
		
	РасходТовара = КонструкторРасхода.Провести();
	
	Возврат РасходТовара;

КонецФункции 

Функция СоздатьДокументПоступлениеДенег(Покупатель, Валюта, Организация, Сумма)

	КонструкторПоступленияДенег = ЮТест.Данные().КонструкторОбъекта("Документы.ПоступлениеДенег")
		.Установить("РасчетныйСчетПокупателя", СоздатьРасчетныйСчетКонтрагента(Покупатель))
		.Установить("РасчетныйСчет", СоздатьРасчетныйСчет(Организация))
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Валюта", Валюта)
		.Установить("Организация", Организация)
		.Установить("Покупатель", Покупатель)
		.Установить("Сумма", Сумма)
		;
		
	ПоступлениеДенег = КонструкторПоступленияДенег.Провести();
	
	Возврат ПоступлениеДенег;

КонецФункции 

#КонецОбласти