
Процедура ИсполняемыеСценарии() Экспорт

	ЮТТесты.ДобавитьТестовыйНабор(НСтр("ru = 'Документ Приход товара: Проверка создания'"))
		.ДобавитьТест("ПроверкаСозданияПозитив", НСтр("ru = 'Проверка создания'"), НСтр("ru = 'Позитив, ДЗ20, Левкина Ольга'")).ВТранзакции()
		;
	ЮТТесты.ДобавитьТестовыйНабор(НСтр("ru = 'Документ Приход товара: Проверка проведения'"))
		.ДобавитьТест("ПроверкаПроведенияПозитив", НСтр("ru = 'Проверка проведения'"), НСтр("ru = 'Позитив, ДЗ20, Левкина Ольга'")).ВТранзакции()
		;

КонецПроцедуры

Процедура ПроверкаСозданияПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	ТоварНовый = СоздатьТовар("Test_Яблоко");
	
	Цена = 100;
	Количество = 10;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	ДокументыКСозданию = Новый Массив;
	
	// 2. Выполнение функции.
		
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
	
		// Создание прихода
		ПриходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
			.ФикцияОбязательныхПолей()
			.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
			.Установить("Дата", ТекущаяДатаСеанса())
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", ТоварНовый)
				.Установить("Цена", Цена)
				.Установить("Количество", ТекущееКоличество)
				.Установить("Сумма", Цена * ТекущееКоличество)
			.НовыйОбъект()
			;
			
		ДокументыКСозданию.Добавить(ПриходТовара);
		
	КонецЦикла;
		
	// 3. Проверка результата.
	Для Каждого ДокументКСозданию Из ДокументыКСозданию Цикл
		ЮТест.ОжидаетЧто(ДокументКСозданию)
			.Метод("Записать").Параметр(РежимЗаписиДокумента.Запись)
			.НеВыбрасываетИсключение()
			;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаПроведенияПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание товара
	ТоварНовый = СоздатьТовар("Test_Яблоко");
	
	// Создание прихода
	Цена = 100;
	Количество = 10;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	ДокументыКПроведению = Новый Массив;
	
	// 2. Выполнение функции.
		
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
	
		// Создание прихода
		ПриходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
			.ФикцияОбязательныхПолей()
			.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
			.Установить("Дата", ТекущаяДатаСеанса())
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", ТоварНовый)
				.Установить("Цена", Цена)
				.Установить("Количество", ТекущееКоличество)
				.Установить("Сумма", Цена * ТекущееКоличество)
			.Записать()
			;
			
		ДокументыКПроведению.Добавить(ПриходТовара);
		
	КонецЦикла;
		
	// 3. Проверка результата.
	Для Каждого ДокументКПроведению Из ДокументыКПроведению Цикл
		ЮТест.ОжидаетЧто(ДокументКПроведению.ПолучитьОбъект())
			.Метод("ПроверитьЗаполнение")
			.НеВыбрасываетИсключение()
			;
		ЮТест.ОжидаетЧто(ДокументКПроведению.ПолучитьОбъект())
			.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
			.НеВыбрасываетИсключение()
			;
		Движения = ЮТЗапросы.ДвиженияДокумента(ДокументКПроведению, "ТоварныеЗапасы");
		ЮТест.ОжидаетЧто(Движения)
			.ИмеетДлинуБольше(0);
		Движения = ЮТЗапросы.ДвиженияДокумента(ДокументКПроведению, "Взаиморасчеты");
		ЮТест.ОжидаетЧто(Движения)
			.ИмеетДлинуБольше(0);
	КонецЦикла;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция СоздатьТовар(Наименование)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
		.ФикцияОбязательныхПолей()
		.Установить("Вид", Перечисления.ВидыТоваров.Товар)
		.Установить("Наименование", Наименование)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

#КонецОбласти