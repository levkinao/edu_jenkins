
Процедура ИсполняемыеСценарии() Экспорт

	ЮТТесты.ДобавитьТестовыйНабор(НСтр("ru = 'Регистр накопления Товарные запасы: Проверка полного списания остатков'")).ВТранзакции()
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковПозитив", НСтр("ru = 'Проверка полного списания остатков'"), НСтр("ru = 'Позитив, ДЗ20, Левкина Ольга'"))
		.ДобавитьТест("ПроверкаПолногоСписанияОстатковНегатив", НСтр("ru = 'Проверка полного списания остатков: Приход больше расхода'"), НСтр("ru = 'Негатив, ДЗ20, Левкина Ольга'"))
		;

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковПозитив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание элементов справочников
	Товар = СоздатьТовар("Test_Яблоко");
	Склад = ЮТест.Данные().СоздатьЭлемент(Справочники.Склады);
	
	// Создание прихода
	Цена = 100;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	// 2. Выполнение функции.
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
		ПриходТовара = СоздатьДокументПриходТовара(Товар, Склад, Цена, ТекущееКоличество);
		РасходТовара = СоздатьДокументРасходТовара(Товар, Склад, ПриходТовара.Валюта, ПриходТовара.Организация, Цена, ТекущееКоличество);
	КонецЦикла;
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", Товар);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", Склад);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатПустой(ОписаниеЗапроса)).ЭтоИстина();

КонецПроцедуры

Процедура ПроверкаПолногоСписанияОстатковНегатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Создание элементов справочников
	Товар = СоздатьТовар("Test_Яблоко");
	Склад = ЮТест.Данные().СоздатьЭлемент(Справочники.Склады);
	
	Цена = 100;
	
	КоличествоПоДокументам = Новый Массив;
	КоличествоПоДокументам.Добавить(2);
	КоличествоПоДокументам.Добавить(1);
	КоличествоПоДокументам.Добавить(3);
	
	КоличествоКСписанию = 0;
	
	// 2. Выполнение функции.
	Для Каждого ТекущееКоличество Из КоличествоПоДокументам Цикл
		
		КоличествоПриход = ТекущееКоличество + 1;
		ПриходТовара = СоздатьДокументПриходТовара(Товар, Склад, Цена, КоличествоПриход);
		КоличествоКСписанию = КоличествоКСписанию + КоличествоПриход;
		
		КоличествоРасход = ТекущееКоличество;
		РасходТовара = СоздатьДокументРасходТовара(Товар, Склад, ПриходТовара.Валюта, ПриходТовара.Организация, Цена, КоличествоРасход);
		КоличествоКСписанию = КоличествоКСписанию - КоличествоРасход;
		
	КонецЦикла;
		
	// 3. Проверка результата.
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", Товар);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", Склад);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса)[0].КоличествоОстаток)
		.Равно(КоличествоКСписанию)
		;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция СоздатьТовар(Наименование)
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
		.ФикцияОбязательныхПолей()
		.Установить("Вид", Перечисления.ВидыТоваров.Товар)
		.Установить("Наименование", Наименование)
		;
		
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СоздатьДокументПриходТовара(Товар, Склад, Цена, Количество)

	КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Валюта")
		.Установить("Склад", Склад)
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", Товар)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Цена * Количество)
		;
		
	ПриходТовара = КонструкторПрихода.Провести();
	
	Возврат ПриходТовара;

КонецФункции 

Функция СоздатьДокументРасходТовара(Товар, Склад, Валюта, Организация, Цена, Количество)

	КонструкторРасхода = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Склад", Склад)
		.Установить("Валюта", Валюта)
		.Установить("Организация", Организация)
		.ФикцияРеквизитов("Покупатель, ВидЦен, ОбоснованиеОтгрузки")
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", Товар)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Цена * Количество)
		;
		
	РасходТовара = КонструкторРасхода.Провести();
	
	Возврат РасходТовара;

КонецФункции 

#КонецОбласти